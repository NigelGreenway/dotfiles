#!/bin/env bash

LIGHT_PURPLE="\[\033[38;5;13m\]"
CYAN="\[\033[38;5;6m\]"
GREEN="\[\033[38;5;28m\]"
WHITE="\[\033[38;5;15m\]"

function is_a_git_directory {
    [[ -n "$(git rev-parse --is-inside-work-tree 2> /dev/null)" ]] && echo 1
}

function git_info {
    if [[ -n $(is_a_git_directory) ]]; then
        local git_status=$(git status -sb 2> /dev/null)

        function is_ahead {
            local count=`echo "${git_status}" | sed -n 's/.*\(ahead [[:digit:]]*\).*/\1/p' | awk '{ print $2 }'`
            [[ ${count} -gt 0 ]] && echo " ${count}${SCM_GIT_AHEAD_CHAR}"
        }

        function is_behind {
            local count=`echo "${git_status}" | sed -n 's/.*\(behind [[:digit:]]*\).*/\1/p' | awk '{ print $2}'`
            [[ ${count} -gt 0 ]] && echo " ${count}${SCM_GIT_BEHIND_CHAR}"
        }

        function is_dirty {
            if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]]
            then
                echo -e "\e[31m✗ \e[35m|"
            else
                echo -e "\e[32m✓"
            fi
        }

        function new_files_added {
            local count=`echo "${git_status}" | grep "^A" | wc -l`
            [[ ${count} -gt 0 ]] && echo " A:${count}" 
        }

        function staged_changes {
            local count=`echo "${git_status}" | egrep "^(M|D)" | wc -l`
            [[ ${count} -gt 0 ]] && echo " S:${count}"
        }

        function tracked_changes {
            local count=`echo "${git_status}" | egrep "^( M|MM| D|D)" | wc -l`
            [[ ${count} -gt 0 ]] && echo " U:${count}"
        }

        function unstaged_changes {
            local count=`echo "${git_status}" | grep "^??" | wc -l`
            [[ ${count} -gt 0 ]] && echo " ?:${count}"
        }

        function stashed_count {
            local count=`git stash list| wc -l`
            [[ ${count} -gt 0 ]] && echo -e "\e[97m[\e[94m${count}\e[97m] "
        }

        local project_path=`git rev-parse --show-toplevel`
        local branch_name="\e[95m$(git rev-parse --abbrev-ref HEAD)"
        local project_name="\e[96m${project_path##*/}"
        local ahead="\e[32m$(is_ahead)"
        local behind="\e[31m$(is_behind)"
        local dirty="$(is_dirty)"
        local added="\e[32m$(new_files_added)"
        local staged="\e[32m$(staged_changes)"
        local tracked="\e[34m$(tracked_changes)"
        local unstaged="\e[31m$(unstaged_changes)"
        local stash_count="$(stashed_count)"

        function show_changes {
            if [[ $(git status -s | wc -l) -gt 0 ]]
            then
                echo -e " \e[96m(${added}${staged}${tracked}${unstaged} \e[96m)"
            fi
        }

        echo -e "\n${project_name}@${branch_name} ${stash_count}${dirty}${ahead}${behind}$(show_changes)"
    fi
}

function display_language_version {
    if [[ -n $(is_a_git_directory) ]]
    then
        local project_root=`git rev-parse --show-toplevel`
        local has_a_package_manager=0

        if [ -f "${project_root}/composer.json" ]
        then
            local php_branding="\033[38;5;99m"
            has_a_package_manager=1
            local php_version=`php -v | grep "^PHP" | sed -n 's/.*\(PHP [[:digit:]].[[:digit:]].[[:digit:]]*\).*/\1/p'`
        fi

        if [ -f "${project_root}/package.json" ]
        then
            local nodejs_branding="\033[38;5;148m"
            has_a_package_manager=1
            local node_version=`node -v| sed 's/[^0-9.]//g' | awk '{ print "Node",$1}'`
        fi

        if [ $has_a_package_manager == 1 ]
        then
            echo -e "| ${php_branding}${php_version} ${nodejs_branding}${node_version}"
        fi
    fi
}

DIRECTORY="${LIGHT_PURPLE}\w"
GIT_INFO="\$(git_info)"
USER_PROMPT="\n${CYAN}> ${WHITE}"
LANGUAGE_VERSIONS="\$(display_language_version)"

export PS1="${DIRECTORY} ${LANGUAGE_VERSIONS} ${GIT_INFO}${USER_PROMPT}"
export PS2="${CYAN}>   ${WHITE}"

unset LIGHT_PURPLE
unset CYAN
unset GREEN
unset WHITE
unset DIRECTORY
unset GIT_INFO
unset USER_PROMPT
